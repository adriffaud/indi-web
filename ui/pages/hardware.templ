package pages

import (
	"fmt"
	indiclient "github.com/adriffaud/indi-web/internal/indi-client"
	"strings"
	"github.com/adriffaud/indi-web/ui/components"
)

func deviceID(device string) string {
	return strings.ReplaceAll(strings.ToLower(device), " ", "_")
}

func uniquePropertyID(property indiclient.Property) string {
	group := strings.ReplaceAll(strings.ToLower(property.Group), " ", "_")
	name := strings.ToLower(property.Name)
	return fmt.Sprintf("%s_%s_%s", deviceID(property.Device), group, name)
}

func uniqueValueName(property indiclient.Property, key string) string {
	key = strings.ToLower(key)
	return fmt.Sprintf("%s_%s", uniquePropertyID(property), key)
}

templ TextProperty(name string, value indiclient.Value, enabled bool) {
	<div id={ name } hx-swap-oob="true" class="grid grid-cols-2 gap-2 items-center">
		@components.Label(name+"_input", value.Label)
		@components.TextInput(name+"_input", value.Value, templ.Attributes{"disabled": templ.KV("true", enabled)})
	</div>
}

templ PropertyValues(property indiclient.Property) {
	switch property.Type {
		case indiclient.Text, indiclient.Number:
			for _, value := range property.Values {
				@TextProperty(uniqueValueName(property, value.Name), value, property.Perm == "ro")
			}
		case indiclient.Switch:
			<div id={ uniquePropertyID(property) } hx-swap-oob="true" class="grid grid-cols-2 gap-2">
				for _, value := range property.Values {
					@components.Button(
						"button",
						value.Label,
						templ.Attributes{
							"hx-post":  "/indi/action",
							"hx-swap":  "none",
							"hx-vals":  fmt.Sprintf("{\"device\": \"%s\", \"name\": \"%s\", \"valueName\": \"%s\"}", property.Device, property.Name, value.Name),
							"disabled": templ.KV("true", property.Perm == "ro" || value.Value == "On"),
						})
				}
			</div>
	}
}

templ groupView(properties indiclient.Properties, device string) {
	for _, group := range properties.GetDeviceGroupsSorted(device) {
		<h4 class="text-lg font-bold pt-4">{ group }</h4>
		for _, property := range properties.GetPropertiesForDeviceGroup(device,
	group) {
			<h5 class="font-bold py-2">{ property.Label }</h5>
			@PropertyValues(property)
		}
	}
}

templ DeviceView(properties indiclient.Properties, device string) {
	<section id={ deviceID(device) } hx-swap-oob="true" class="grid grid-cols-1 gap-2 p-4">
		<h3 class="text-2xl font-bold">{ device }</h3>
		@groupView(properties, device)
	</section>
}

templ Hardware(properties indiclient.Properties) {
	@Root() {
		<div class="grid grid-cols-1 gap-2">
			for _, device := range properties.GetDevicesSorted() {
				@DeviceView(properties, device)
			}
		</div>
	}
}
