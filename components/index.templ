package components

import "github.com/adriffaud/indi-web/internal/indi-server"
import "strings"
import "github.com/adriffaud/indi-web/internal/indi-client"
import "fmt"

templ navItem(path, name, active string) {
	<li class="nav-item">
		<a href={ templ.URL(path) } class={ "nav-link" , templ.KV("active", active=="/hardware" ) }>{ name }</a>
	</li>
}

templ navigation(active string) {
	<nav class="navbar navbar-expand-lg bg-body-tertiary">
		<div class="container-fluid">
			<a href="/" class="navbar-brand">INDI Web</a>
			<button
				class="navbar-toggler"
				type="button"
				data-bs-toggle="collapse"
				data-bs-target="#navbarSupportedContent"
				aria-controls="navbarSupportedContent"
				aria-expanded="false"
				aria-label="Toggle navigation"
			>
				<span class="navbar-toggler-icon"></span>
			</button>
			<div class="collapse navbar-collapse" id="navbarSupportedContent">
				<ul class="navbar-nav me-auto">
					@navItem("/hardware", "Hardware configuration", active)
				</ul>
			</div>
		</div>
	</nav>
}

templ Main(active string) {
	@Root() {
		@navigation(active)
		<div></div>
	}
}

templ propertyValues(property indiclient.Property) {
	switch property.Type {
		case indiclient.Text:
			for _, value := range property.Values {
				<div class="row mb-3">
					<label for={ value.Name } class="col-sm-2 col-form-label col-form-label-sm">
						{ 
		value.Label }
					</label>
					<div class="col-sm-10">
						<input
							type="text"
							id={ value.Name }
							class="form-control"
							value={ value.Value }
							if property.Perm=="ro" {
								disabled
							}
						/>
					</div>
				</div>
			}
		case indiclient.Switch:
			<div class="btn-group" role="group" aria-label="Basic example">
				for _, value := range property.Values {
					<button
						type="button"
						class={ "btn btn-primary" , templ.KV("active", value.Value=="On" ) }
						if property.Perm=="ro" {
							disabled
						}
					>
						{ value.Label }
					</button>
				}
			</div>
	}
}

templ groupView(properties indiclient.Properties, device string) {
	for idx, group := range properties.GetDeviceGroupsSorted(device) {
		<div class="accordion-item">
			<h2 class="accordion-header">
				<button
					class={ "accordion-button" , templ.KV("collapsed", idx> 0) }
					type="button"
					data-bs-toggle="collapse"
					data-bs-target={ fmt.Sprintf("#%s-%d", deviceId(device), idx) }
					if idx == 0 {
						aria-expanded="true"
					} else {
						aria-expanded="false"
					}
					aria-controls={ fmt.Sprintf("%s-%d", deviceId(device), idx) }
				>
					{ group }
				</button>
			</h2>
			<div
				id={ fmt.Sprintf("%s-%d", deviceId(device), idx) }
				class={ "accordion-collapse collapse" , templ.KV("show",
		idx==0) }
				data-bs-parent={ fmt.Sprintf("#%s-accordion", deviceId(device)) }
			>
				<div class="accordion-body">
					for _, property := range properties.GetPropertiesForDeviceGroup(device,
			group) {
						<h5>{ property.Label }</h5>
						<form>
							@propertyValues(property)
						</form>
					}
				</div>
			</div>
		</div>
	}
}

func deviceId(device string) string {
	return strings.ReplaceAll(strings.ToLower(device), " ", "-")
}

templ deviceView(properties indiclient.Properties, device string) {
	<div class="col-sm-12 col-md-6 g-4">
		<div class="card">
			<div class="card-header">{ device }</div>
			<div class="card-body">
				<div class="accordion accordion-flush" id={ fmt.Sprintf("%s-accordion", deviceId(device)) }>
					@groupView(properties, device)
				</div>
			</div>
		</div>
	</div>
}

templ Hardware(active string, properties indiclient.Properties) {
	@Root() {
		@navigation(active)
		<div class="container-fluid mb-4">
			<div class="row">
				for _, device := range properties.GetDevicesSorted() {
					@deviceView(properties, device)
				}
			</div>
		</div>
	}
}

templ driverSelector(group string, drivers []indiserver.Device, selection indiserver.Device) {
	<label for={ strings.ToLower(group) + "_select" } class="form-label">{ group }</label>
	<select id={ strings.ToLower(group) + "_select" } name={ strings.ToLower(group) + "_select" } class="form-control">
		<option value=""></option>
		for _, driver := range drivers {
			<option
				value={ driver.DriverName }
				if selection.DriverName==driver.DriverName &&
		selection.Manufacturer==driver.Manufacturer {
					selected
				}
			>
				{ driver.Manufacturer } - { driver.Name }
			</option>
		}
	</select>
}

templ input(id, value string) {
	<input id={ id } value={ value } class="form-control"/>
}

templ Setup(driversGroups indiserver.DeviceGroups, devices map[string]indiserver.Device) {
	@Root() {
		<div class="container h-100">
			<form method="post" class="row h-100 justify-content-center align-items-center">
				<fieldset class="row g-4">
					<div class="col-md-6">
						<label for="date-time" class="form-label">Date/Time</label>
						@input("date-time", "2023-11-01 20:45")
					</div>
					<div class="col-md-6">
						@driverSelector("Mount", driversGroups["Telescopes"], devices["mount"])
					</div>
					<div class="col-md-6">
						<label for="latitude">Latitude</label>
						@input("latitude", "N 47ยบ 14' 25\"")
					</div>
					<div class="col-md-6">
						@driverSelector("Camera", driversGroups["CCDs"], devices["ccd"])
					</div>
					<div class="col-md-6">
						<label for="longitude">Longitude</label>
						@input("longitude", "E 05ยบ 55' 57\"")
					</div>
					<div class="col-md-6">
						@driverSelector("Guider", driversGroups["CCDs"], devices["guide"])
					</div>
					<div class="col-12 text-center">
						<button id="indi_server" type="submit" class="btn btn-primary">Start</button>
					</div>
				</fieldset>
			</form>
		</div>
	}
}
