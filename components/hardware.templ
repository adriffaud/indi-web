package components

import (
	"fmt"
	indiclient "github.com/adriffaud/indi-web/internal/indi-client"
	"strings"
)

func deviceID(device string) string {
	return strings.ReplaceAll(strings.ToLower(device), " ", "_")
}

func uniquePropertyID(property indiclient.Property) string {
	group := strings.ReplaceAll(strings.ToLower(property.Group), " ", "_")
	name := strings.ToLower(property.Name)
	return fmt.Sprintf("%s_%s_%s", deviceID(property.Device), group, name)
}

func uniqueValueName(property indiclient.Property, key string) string {
	key = strings.ToLower(key)
	return fmt.Sprintf("%s_%s", uniquePropertyID(property), key)
}

templ PropertyValues(property indiclient.Property) {
	switch property.Type {
		case indiclient.Text, indiclient.Number:
			for _, value := range property.Values {
				<tr id={ uniqueValueName(property, value.Name) } hx-swap-oob="true">
					<td>
						<label for={ uniqueValueName(property, value.Name) + "_input" }>{ value.Label }</label>
					</td>
					<td>
						<input
							id={ uniqueValueName(property, value.Name) + "_input" }
							value={ value.Value }
							type="text"
							if property.Perm == "ro" {
								disabled="true"
							}
						/>
					</td>
				</tr>
			}
		case indiclient.Switch:
			<td id={ uniquePropertyID(property) } hx-swap-oob="true">
				for _, value := range property.Values {
					<button
						type="button"
						hx-post="/indi/action"
						hx-swap="none"
						hx-vals={ fmt.Sprintf("{\"device\": \"%s\", \"name\": \"%s\", \"valueName\": \"%s\"}", property.Device, property.Name, value.Name) }
						if property.Perm == "ro" || value.Value == "On" {
							disabled="true"
						}
					>
						{ value.Label }
					</button>
				}
			</td>
	}
}

templ groupView(properties indiclient.Properties, device string) {
	for _, group := range properties.GetDeviceGroupsSorted(device) {
		<h4>{ group }</h4>
		for _, property := range properties.GetPropertiesForDeviceGroup(device,
	group) {
			<form>
				<fieldset>
					<legend>{ property.Label }</legend>
					<table>
						<tbody>
							@PropertyValues(property)
						</tbody>
					</table>
				</fieldset>
			</form>
		}
	}
}

templ DeviceView(properties indiclient.Properties, device string) {
	<section id={ deviceID(device) } hx-swap-oob="true">
		<h3>{ device }</h3>
		@groupView(properties, device)
	</section>
}

templ Hardware(properties indiclient.Properties) {
	@Root() {
		<div hx-ext="sse" sse-connect="/sse" sse-swap="message"></div>
		<h4>Notifications</h4>
		<samp id="notifications"></samp>
		<hr/>
		for _, device := range properties.GetDevicesSorted() {
			@DeviceView(properties, device)
		}
	}
}
