package components

import (
	"fmt"
	indiclient "github.com/adriffaud/indi-web/internal/indi-client"
	"strings"
)

func deviceID(device string) string {
	return strings.ReplaceAll(strings.ToLower(device), " ", "_")
}

func uniquePropertyID(property indiclient.Property) string {
	group := strings.ReplaceAll(strings.ToLower(property.Group), " ", "_")
	name := strings.ToLower(property.Name)
	return fmt.Sprintf("%s_%s_%s", deviceID(property.Device), group, name)
}

func uniqueValueName(property indiclient.Property, key string) string {
	key = strings.ToLower(key)
	return fmt.Sprintf("%s_%s", uniquePropertyID(property), key)
}

templ PropertyValues(property indiclient.Property) {
	switch property.Type {
		case indiclient.Text, indiclient.Number:
			for _, value := range property.Values {
				<div id={ uniqueValueName(property, value.Name) } hx-swap-oob="true" class="py-2 flex flex-col gap-2">
					@label(uniqueValueName(property, value.Name)+"_input", value.Label)
					@textInput(uniqueValueName(property, value.Name)+"_input", value.Value, templ.Attributes{"disabled": templ.KV("true", property.Perm == "ro")})
				</div>
			}
		case indiclient.Switch:
			<span id={ uniquePropertyID(property) } hx-swap-oob="true" class="flex flex-wrap md:flex-nowrap gap-2">
				for _, value := range property.Values {
					@button(
						"button",
						value.Label,
						templ.Attributes{
							"hx-post":  "/indi/action",
							"hx-swap":  "none",
							"hx-vals":  fmt.Sprintf("{\"device\": \"%s\", \"name\": \"%s\", \"valueName\": \"%s\"}", property.Device, property.Name, value.Name),
							"disabled": templ.KV("true", property.Perm == "ro" || value.Value == "On"),
						})
				}
			</span>
	}
}

templ groupView(properties indiclient.Properties, device string) {
	for _, group := range properties.GetDeviceGroupsSorted(device) {
		<span class="col-span-3 justify-self-center text-center p-2 font-semibold border-y border-slate-600 w-full text-lg">{ group }</span>
		for _, property := range properties.GetPropertiesForDeviceGroup(device,
	group) {
			<span class="font-semibold justify-self-center self-center">{ property.Label }</span>
			<div class="col-span-2 px-4">
				@PropertyValues(property)
			</div>
		}
	}
}

templ DeviceView(properties indiclient.Properties, device string) {
	<div id={ deviceID(device) } hx-swap-oob="true" class="text-white border-y md:border md:rounded-lg shadow-lg my-2 md:m-2 py-4 border-slate-600 dark:bg-gray-800 grid grid-cols-3 gap-4">
		<span class="col-span-3 font-bold justify-self-center pt-2 text-xl">{ device }</span>
		@groupView(properties, device)
	</div>
}

templ Hardware(properties indiclient.Properties) {
	@Root() {
		<div hx-ext="sse" sse-connect="/sse" sse-swap="message"></div>
		<div class="flex flex-col border-b md:border md:rounded-lg md:m-2 h-12 dark:bg-gray-800 border-slate-600 dark:text-slate-400 px-4 justify-center">
			<span id="notifications"></span>
		</div>
		for _, device := range properties.GetDevicesSorted() {
			@DeviceView(properties, device)
		}
	}
}
